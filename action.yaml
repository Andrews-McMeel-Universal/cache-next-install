name: Cache Node Install

description: Installs Node dependencies and caches the result

branding:
  color: yellow
  icon: download

inputs:
  node-version:
    description: "Node version to use"
    required: false
  node-version-file:
    description: "Node version file to use"
    required: false
    default: ".nvmrc"
  install-dev-dependencies:
    required: false
    description: "Install devDependencies listed in package.json file"
    default: "false"

runs:
  using: "composite"
  steps:
    # Installs node and caches the global yarn cache (does not cache node_modules)
    - name: Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version || '' }}
        node-version-file: ${{ inputs.node-version-file || '' }}
        cache: "yarn"

    # Caches node_modules, breaks cache when yarn.lock is updated
    - name: Cache dependencies
      id: dependency-cache
      uses: actions/cache@v3
      with:
        path: |
          ./node_modules
        key: install-${{ hashFiles('**/.env','**/*lock*') }}

    # Installs dependencies from the cached packages
    # in the global yarn cache if the cache was broken
    - name: Install dependencies
      if: ${{ steps.dependency-cache.outputs.cache-hit != 'true' && inputs.install-dev-dependencies == "false" }}
      shell: bash
      run: yarn install

    - name: Install all dependencies (including devDependencies)
      if: ${{ steps.dependency-cache.outputs.cache-hit != 'true' && inputs.install-dev-dependencies == "true" }}
      shell: bash
      run: NODE_ENV=development yarn install
